y <- c( 495, 541, 1461, 1555, 1603, 2201, 2750, 3468, 3516, 4319,
6622, 7728, 13159, 21194 )
y.bar <- meant(y)
y.sum <- sum(y)
y.bar <- mean(y)
likelihood <- function(eta){
f <- eta^n * exp(-eta*y.sum)
return(f)
}
likelihood(40)
n <- 14
likelihood(14)
likelihood(.1)
likelihood(100)
10^14
exp(-10)
exp(-10*y,sum)
exp(-10*y.sum)
prior <- function (alpha, beta, eta){
f <- ((beta^alpha)/gamma(alpha)) * (1/eta)^-(alpha+1) * exp(-beta * eta)
return(F)
}
exp(-100000)
exp(-.00001)
exp(-.000000000001)
exp(-.000000001)
exp(-.000001)
gammaDist
GammaDist
help(GammaDist)
x.grid <- seq( 0.01, 5.0, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
gamma(alpha, beta)
alpha <- 8.25
beta <- 32625
gamma(alpha, beta)
x.grid <- seq( 0.01, 10.0, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
x.grid <- seq( 0.01, 7.0, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
x.grid <- seq( 0.01, 4.0, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
x.grid <- seq( 0.01, 5.5, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
x.grid <- seq( 0.01, 5.9, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
x.grid <- seq( 0.01, 6, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
x.grid <- seq( 0.01, 6.5, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
x.grid <- seq( 0.01, 1, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
x.grid <- seq( 0.1, 1, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
x.grid <- seq( 1, 1, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
x.grid <- seq( .9, 1, length = 500 )
plot( x.grid, gamma( x.grid ), type = 'l', xlab = 'x',
ylab = 'Gamma( x )' )
help(dgamma)
dgamma(alpha,beta)
plot(y, dgamma(alpha,beta))
plot(y, dgamma(alpha,beta,1))
x <- seq(0, 7, by=.001)
plot(x, dgamma(xx, 1/2, 1))
dgamma(y,alpha,beta)
dgamma(y,1/alpha,1/beta)
plot(dgamma(y,1/alpha,1/beta))
likelihood.grid <- likelihood(x.grid)
plot(x.grid,likelihood.grid)
x.grid
rm(x)
rm(x.grid)
eta.grid <- seq(0, 5, length = 100)
likelihood.grid = likelihood(eta.grid)
plot(eta.grid)
plot(eta.grid, likelihood.grid)
likelihood(1)
eta.grid <- seq(.00001, .00005, length = 100)
likelihood.grid = likelihood(eta.grid)
plot(eta.grid, likelihood.grid)
eta.grid <- seq(.0001, .0005, length = 100)
likelihood.grid = likelihood(eta.grid)
plot(eta.grid, likelihood.grid)
pareto.dist <-function(alpha,beta,theta){
f <- alpha*beta*theta^(-(alpha-1))
return(f)
}
y = c(.4,1,1.5,1.7,2,2.1,2.8,3.2,3.7,4.3,5.1)
alpha = 2.5
beta = 4
theta.grid = seq(5.2,10,length(200))
pareto.grid = pareto.dist(alpha,beta,theta.grid)
plot(theta.grid,pareto.grid)
theta.grid = seq(5.2,10,length=200)
pareto.grid = pareto.dist(alpha,beta,theta.grid)
plot(theta.grid,pareto.grid)
theta.grid = seq(5.2,10,length=500)
pareto.grid = pareto.dist(alpha,beta,theta.grid)
plot(theta.grid,pareto.grid)
n=11
posterior.grid = pareto.dist(alpha + n, 5.1, theta.grid)
plot(theta.grid, posterior.grid)
points(theta.grid,pareto.grid)
points(pareto.grid)
likelihood.2 <- function( theta, n, I ) {
f <-(theta^-n) *I
return( f )
}
likelihood.grid <- likelihood.2(theta.grid,n,1)
plot(theta,grid,likelihood.grid)
plot(theta,grid,likelihood.grid)
plot(theta.grid,likelihood.grid)
points(pareto.grid)
plot(pareto.grid)
points(pareto.grid)
points(y)
plot(theta.grid,likelihood.grid, ylim=c(0,1))
points(pareto.grid)
points(posterior.grid)
theta.grid = seq(5.2,10,length=100)
pareto.grid = pareto.dist(alpha,beta,theta.grid)
plot(theta.grid,pareto.grid)
likelihood.grid <- likelihood.2(theta.grid,n,1)
plot(theta.grid,likelihood.grid)
posterior.grid = pareto.dist(alpha + n, 5.1, theta.grid)
plot(theta.grid, posterior.grid)
points(likelihood.grid)
points(pareto.grid)
help(ifelse)
likelihood.grid <- likelihood.2(theta.grid,n,1)
plot(theta.grid,likelihood.grid)
ifelse(theta.grid >= beta, theta.grid,0)
#prior
pareto.dist <-function(alpha,beta,theta){
f <- alpha*beta*theta^(-(alpha-1))
return(f)
}
pareto.dist <-function(alpha,beta,theta){
ifelse(theta >= beta, theta,0)
f <- alpha*beta*theta^(-(alpha-1))
return(f)
}
pareto.dist(alpha,beta.theta.grid)
pareto.dist <-function(alpha,beta,theta){
#ifelse(theta >= beta, theta,0)
f <- alpha*beta*theta^(-(alpha-1))
return(f)
}
pareto.dist(alpha,beta.theta.grid)
pareto.dist <-function(alpha,beta,theta){
ifelse(theta >= beta, theta,0)
f <- alpha*beta*theta^(-(alpha-1))
return(f)
}
pareto.dist(alpha,beta,theta.grid)
theta.grid = seq(1,10,length=100)
pareto.dist(alpha,beta,theta.grid)
pareto.dist <-function(alpha,beta,theta){
ifelse(theta >= beta, theta=theta,theta =0)
f <- alpha*beta*theta^(-(alpha-1))
return(f)
}
pareto.dist(alpha,beta,theta.grid)
pareto.dist <-function(alpha,beta,theta){
ifelse(theta >= beta, theta,theta =0)
f <- alpha*beta*theta^(-(alpha-1))
return(f)
}
pareto.dist(alpha,beta,theta.grid)
pareto.dist <-function(alpha,beta,theta){
#ifelse(theta >= beta, theta,theta =0)
f <- alpha*beta*theta^(-(alpha-1))
return(f)
}
pareto.dist(alpha,beta,theta.grid)
theta.grid = seq(5.1,10,length=100)
pareto.grid = pareto.dist(alpha,beta,theta.grid)
plot(theta.grid,pareto.grid)
posterior.grid = pareto.dist(alpha + n, 5.1, theta.grid)
likelihood.grid = pareto.dist(n-1,5.1,theta.grid)
plot(theta.grid, posterior.grid)
points(likelihood.grid)
rm(pareto.grid)
prior.grid = pareto.dist(alpha,beta,theta.grid)
prior.grid = pareto.dist(alpha,beta,theta.grid)
plot(theta.grid,pareto.grid)
prior.grid = pareto.dist(alpha,beta,theta.grid)
plot(theta.grid,prior.grid)
posterior.grid = pareto.dist(alpha + n, 5.1, theta.grid)
plot(theta.grid, posterior.grid)
likelihood.grid = pareto.dist(n-1,5.1,theta.grid)
plot(theta.grid,likelihood.grid)
x <- c(2,6,10)
var(x)
mean(x)
t<-c(.2,.4,.4)
y <- x*y
y <- x*t
sum(y)
var(y)
y-mean(x)
(y-mean(x))^2
sum(y^2)
sum(y^2)-mean(x)^2
x^2 - sum(x)^2
y^2 -sum(y)^2
x^2*t - sum(y)^2
(x^2*t) - sum(y)^2
sum((x^2*t) - sum(y)^2)
(x-sum(y))^2*t
sum((x-sum(y))^2*t)
4.608+.256+4.096
sqrt(8.96)
sum((x-sum(y))^2*t)
sqrt(sum((x-sum(y))^2*t))
x <- c(17.35,-8,9.68,-9.05,-17.16,15.96,12.64,-6.52)
var(x)
mean(x)
mean <- mean(x)
(x-mean)^2
sum((x-mean)^2)/length(x)
sum((x-mean)^2)/length(x)-1
sum((x-mean)^2)/(length(x)-1)
length(x)
sum((x-mean)^2)/length(x)
x <- c(17.35, -8, 10.43, 9.68, -9.05, -17.16, 10.04, 15.96, 12.64, -6.52)
sum((x-mean)^2)/(length(x)-1)
sum((x-mean)^2)/length(x)
mean <= mean(x)
mean <- mean(x)
sum((x-mean)^2)/(length(x)-1)
sqrt(sum((x-mean)^2)/(length(x)-1))
(.2^2) * .2 + (.8^2) * .15 + 2*.2*.8*.5
sqrt((.2^2) * .2 + (.8^2) * .15 + 2*.2*.8*.5)
.2^2 * .2 + .8^2 *.15 +
2*.2*.8*.5
.2*.2*.2
.8*.8*.15
2*.2*.8*.5
(.2^2) * .2 + (.8^2) * .15 + 2*.3*.7*.5
(.2^2) * .2 + (.8^2) * .15 + 2*.2*.8*.5
((.2^2) * .2) + ((.8^2) * .15) + (2*.2*.8*.5)
sqrt(.2)
sqrt(.15)
.5/(.4472136)(.3872136))
.5/((.4472136)(.3872136))
.5/((.4472136)*(.3872136))
(.2*.2*.2) + (.15*.8*.8) +
(2 * 2.887 * .447 * .387 * .2 * .8)
(.2*.2*.2) + (.15*.8*.8) +
(2 * 2.887 * .447 * .387 * .2 * .8)sqrt((.2*.2*.2) + (.15*.8*.8) +
(2 * 2.887 * .447 * .387 * .2 * .8))
sqrt((.2*.2*.2) + (.15*.8*.8) +
(2 * 2.887 * .447 * .387 * .2 * .8))
.2*.2
.7*.7
.2*.2
.04*.2
.64*.15
.15*.15
.0225*.64
.176^1/2
.176^(1/2)
.04*.2*.2
.09*.3*.3
.49*.15*.15
2*.3*.7*.4
2*.2*.8*35
2*.2*.8*.5
.32*.5
.0081+.011+.168
sqrt(.0081+.011+.168)
plot(post.grid)
plot(posterior.grid)
plot(prior.grid)
plot(likelihood.grid)
x <- c(2,6,10)
p <- c(.2,.4,.4)
e <- 6.8
var <- sum((x-e) * p)
x <- c(2,6,10)
p <- c(.2,.4,.4)
e <- 6.8
var <- sum((x-e)^2 * p)
loan.amount <-c(1000,5000,20000,200000,1000000)
willingness <-c(.57,.65,.70,.66,.41)
plot(loan.amont,willingnes,type="lw")
plot(loan.amount,willingnes,type="lw")
plot(loan.amount,willingness,type="lw")
willingness <-c(0.0180037,0.026838,0.0565689,0.1364211,0.1694236)
loan.amount <-c(1000,5000,20000,200000,1000000)
plot(loan.amount,willingness,type="lw")
100*.001
willingness <-c(0.0007851,0.0002973,0.0007813,0.0018736,0.0012461)
plot(loan.amount,willingness,type="lw")
female.treat<-c(.012,.19)
female.control<-c(.014,.09)
male.treat<-c(.0034,.086)
male.control<-c(.0038,.047)
year(2010,2012)
plot(year,female.treat,type="lwd",xlim=c(2010,2012),ylim-c(.003,.2))
lines(year,female.control,col="blue")
lines(year,male.treat,col="red")
lines(year,male.control,col="green")
legend("topleft", c("Female Treat", "Female Control", "Male Treat", "Male Control"), lty=c(1,1,1,1), col=c("black","blue","red","green"),)
year<-c(2010,2012)
plot(year,female.treat,type="lwd",xlim=c(2010,2012),ylim-c(.003,.2))
lines(year,female.control,col="blue")
lines(year,male.treat,col="red")
lines(year,male.control,col="green")
legend("topleft", c("Female Treat", "Female Control", "Male Treat", "Male Control"), lty=c(1,1,1,1), col=c("black","blue","red","green"),)
plot(year,female.treat,type="lwd",xlim=c(2010,2012),ylim-c(.003,.2))
plot(year,female.treat,type="lwd",xlim=c(2010,2012),ylim=c(.003,.2))
ines(year,female.control,col="blue")
lines(year,male.treat,col="red")
lines(year,male.control,col="green")
legend("topleft", c("Female Treat", "Female Control", "Male Treat", "Male Control"), lty=c(1,1,1,1), col=c("black","blue","red","green"),)
lines(year,female.control,col="blue")
type="lwd",xlim=c(2010,2012),ylim=c(.003,.2)
female.par <- c(.106,.181)
male.par <- c(.034,.081)
plot(year,female.par, type="lwd",xlim=c(2010,2012),ylim=c(.03,.2))
lines(year,male.par,col="red")
legend("topleft", c("Female participatin","Male Participation"),ity=c(1,1),
col=c("black","red"))
legend("topleft", c("Female participatin","Male Participation"),ity=c(1,1),col=c("black","red"))
legend("topleft", c("Female Par","Male Par"), lty=c(1,1), col=c("black","red","red))
)
fv
sfvsd
""
""
legend("topleft", c("Female Par","Male Par"), lty=c(1,1), col=c("black","red"))
library("KernSmooth", lib.loc="C:/Program Files/R/R-2.15.3/library")
install.packages("knitr")
x +y
dickbag <- function(x,y) {
x + y
}
dickbag(13333333, 3)
library(datasets)
data(iris)
?iris
library(datasets)
data(iris)
iris
summary(iris)
colMeans(iris)
help(lapply)
lapply(iris, mean)
head(iris)
x <- subset(iris, iris$Species == "virginica")
lapply(x,mean)
head(x)
length
(x)
length(X)
x
length(x)
length(iris)
tail(iris)
tail(x)
head(irish)
head(iris)
head(x)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
library(datasets)
data(mtcars)
?mrcars
?mtcars
summary(mrcars)
summary(mrcars)
summary(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
summary(mtcars)
sapply(split(mtcars$hp,mtcars$cyl),mean)
209.21429 - 82.63636
debug(ls)
ls
help(tapply)
tapply(iris,species,mean)
tapply(iris,Species,mean)
iris$species
summary(iris)
tapply(iris,iris$Species,mean)
tapply(iris,iris$Species,mean)
tapply(iris,iris$Sepal.Length,mean)
tapply(iris$Species,iris$Sepal.Length,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function will be called in the previous function to
## find the inverse of the matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix(c(1,3,2,4), ncol=2, nrow=2)
makeCacheMatrix(c(1,3,2,4))
a<-makeCacheMatrix(c(1,3,2,4))
cacheSolve(a)
a<-matrix
a<-matrix(1:4,2,2)
b<-makeCacheMatrix(a)
cacheSolver(b)
cacheSolve(b)
cacheSolve(b)
##
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function will be called in the previous function to
## find the inverse of the matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a<-matix(1:4,2,2)
a<-matrix(1:4,2,2)
b<-makeCachMatrix(a)
b<-makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
b$getinverse
b$getinverse()
a<-matrix(4:8,2,2)
a<-matrix(4:7,2,2)
b<-makeCacheMatrix(a)
a$getinverse()
b$getinverse()
cacheSolve(b)
b$getinverse()
setwd("~/Coursera/Data_Science/R_Programming/ProgrammingAssignment2")
